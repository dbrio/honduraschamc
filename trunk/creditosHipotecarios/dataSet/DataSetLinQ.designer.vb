'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.34014
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="amcApp")>  _
Partial Public Class DataSetLinQDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Definiciones de métodos de extensibilidad"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InserthipotecaEstado(instance As hipotecaEstado)
    End Sub
  Partial Private Sub UpdatehipotecaEstado(instance As hipotecaEstado)
    End Sub
  Partial Private Sub DeletehipotecaEstado(instance As hipotecaEstado)
    End Sub
  Partial Private Sub InsertHipoteca(instance As Hipoteca)
    End Sub
  Partial Private Sub UpdateHipoteca(instance As Hipoteca)
    End Sub
  Partial Private Sub DeleteHipoteca(instance As Hipoteca)
    End Sub
  Partial Private Sub Insertprestamo(instance As prestamo)
    End Sub
  Partial Private Sub Updateprestamo(instance As prestamo)
    End Sub
  Partial Private Sub Deleteprestamo(instance As prestamo)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.creditosHipotecarios.My.MySettings.Default.amcAppConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property hipotecaEstado() As System.Data.Linq.Table(Of hipotecaEstado)
		Get
			Return Me.GetTable(Of hipotecaEstado)
		End Get
	End Property
	
	Public ReadOnly Property Hipoteca() As System.Data.Linq.Table(Of Hipoteca)
		Get
			Return Me.GetTable(Of Hipoteca)
		End Get
	End Property
	
	Public ReadOnly Property prestamo() As System.Data.Linq.Table(Of prestamo)
		Get
			Return Me.GetTable(Of prestamo)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.hipotecaEstado")>  _
Partial Public Class hipotecaEstado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _hipotecaEstadoId As Integer
	
	Private _hipotecaId As Integer
	
	Private _estadoId As Integer
	
	Private _fecha As Date
	
	Private _usuarioId As Integer
	
	Private _Hipoteca As EntityRef(Of Hipoteca)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnhipotecaEstadoIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnhipotecaEstadoIdChanged()
    End Sub
    Partial Private Sub OnhipotecaIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnhipotecaIdChanged()
    End Sub
    Partial Private Sub OnestadoIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnestadoIdChanged()
    End Sub
    Partial Private Sub OnfechaChanging(value As Date)
    End Sub
    Partial Private Sub OnfechaChanged()
    End Sub
    Partial Private Sub OnusuarioIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnusuarioIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Hipoteca = CType(Nothing, EntityRef(Of Hipoteca))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hipotecaEstadoId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property hipotecaEstadoId() As Integer
		Get
			Return Me._hipotecaEstadoId
		End Get
		Set
			If ((Me._hipotecaEstadoId = value)  _
						= false) Then
				Me.OnhipotecaEstadoIdChanging(value)
				Me.SendPropertyChanging
				Me._hipotecaEstadoId = value
				Me.SendPropertyChanged("hipotecaEstadoId")
				Me.OnhipotecaEstadoIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hipotecaId", DbType:="Int NOT NULL")>  _
	Public Property hipotecaId() As Integer
		Get
			Return Me._hipotecaId
		End Get
		Set
			If ((Me._hipotecaId = value)  _
						= false) Then
				If Me._Hipoteca.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnhipotecaIdChanging(value)
				Me.SendPropertyChanging
				Me._hipotecaId = value
				Me.SendPropertyChanged("hipotecaId")
				Me.OnhipotecaIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_estadoId", DbType:="Int NOT NULL")>  _
	Public Property estadoId() As Integer
		Get
			Return Me._estadoId
		End Get
		Set
			If ((Me._estadoId = value)  _
						= false) Then
				Me.OnestadoIdChanging(value)
				Me.SendPropertyChanging
				Me._estadoId = value
				Me.SendPropertyChanged("estadoId")
				Me.OnestadoIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fecha", DbType:="DateTime NOT NULL")>  _
	Public Property fecha() As Date
		Get
			Return Me._fecha
		End Get
		Set
			If ((Me._fecha = value)  _
						= false) Then
				Me.OnfechaChanging(value)
				Me.SendPropertyChanging
				Me._fecha = value
				Me.SendPropertyChanged("fecha")
				Me.OnfechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_usuarioId", DbType:="Int NOT NULL")>  _
	Public Property usuarioId() As Integer
		Get
			Return Me._usuarioId
		End Get
		Set
			If ((Me._usuarioId = value)  _
						= false) Then
				Me.OnusuarioIdChanging(value)
				Me.SendPropertyChanging
				Me._usuarioId = value
				Me.SendPropertyChanged("usuarioId")
				Me.OnusuarioIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Hipoteca_hipotecaEstado", Storage:="_Hipoteca", ThisKey:="hipotecaId", OtherKey:="hipotecaId", IsForeignKey:=true)>  _
	Public Property Hipoteca() As Hipoteca
		Get
			Return Me._Hipoteca.Entity
		End Get
		Set
			Dim previousValue As Hipoteca = Me._Hipoteca.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Hipoteca.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Hipoteca.Entity = Nothing
					previousValue.hipotecaEstado.Remove(Me)
				End If
				Me._Hipoteca.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.hipotecaEstado.Add(Me)
					Me._hipotecaId = value.hipotecaId
				Else
					Me._hipotecaId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Hipoteca")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Hipoteca")>  _
Partial Public Class Hipoteca
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _hipotecaId As Integer
	
	Private _abogadoId As Integer
	
	Private _numeroIp As String
	
	Private _matricula As String
	
	Private _asiento As String
	
	Private _tomo As String
	
	Private _prestamoId As Integer
	
	Private _hipotecaEstado As EntitySet(Of hipotecaEstado)
	
	Private _prestamo As EntityRef(Of prestamo)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnhipotecaIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnhipotecaIdChanged()
    End Sub
    Partial Private Sub OnabogadoIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnabogadoIdChanged()
    End Sub
    Partial Private Sub OnnumeroIpChanging(value As String)
    End Sub
    Partial Private Sub OnnumeroIpChanged()
    End Sub
    Partial Private Sub OnmatriculaChanging(value As String)
    End Sub
    Partial Private Sub OnmatriculaChanged()
    End Sub
    Partial Private Sub OnasientoChanging(value As String)
    End Sub
    Partial Private Sub OnasientoChanged()
    End Sub
    Partial Private Sub OntomoChanging(value As String)
    End Sub
    Partial Private Sub OntomoChanged()
    End Sub
    Partial Private Sub OnprestamoIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnprestamoIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._hipotecaEstado = New EntitySet(Of hipotecaEstado)(AddressOf Me.attach_hipotecaEstado, AddressOf Me.detach_hipotecaEstado)
		Me._prestamo = CType(Nothing, EntityRef(Of prestamo))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hipotecaId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property hipotecaId() As Integer
		Get
			Return Me._hipotecaId
		End Get
		Set
			If ((Me._hipotecaId = value)  _
						= false) Then
				Me.OnhipotecaIdChanging(value)
				Me.SendPropertyChanging
				Me._hipotecaId = value
				Me.SendPropertyChanged("hipotecaId")
				Me.OnhipotecaIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_abogadoId", DbType:="Int NOT NULL")>  _
	Public Property abogadoId() As Integer
		Get
			Return Me._abogadoId
		End Get
		Set
			If ((Me._abogadoId = value)  _
						= false) Then
				Me.OnabogadoIdChanging(value)
				Me.SendPropertyChanging
				Me._abogadoId = value
				Me.SendPropertyChanged("abogadoId")
				Me.OnabogadoIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_numeroIp", DbType:="NVarChar(20)")>  _
	Public Property numeroIp() As String
		Get
			Return Me._numeroIp
		End Get
		Set
			If (String.Equals(Me._numeroIp, value) = false) Then
				Me.OnnumeroIpChanging(value)
				Me.SendPropertyChanging
				Me._numeroIp = value
				Me.SendPropertyChanged("numeroIp")
				Me.OnnumeroIpChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_matricula", DbType:="NVarChar(100)")>  _
	Public Property matricula() As String
		Get
			Return Me._matricula
		End Get
		Set
			If (String.Equals(Me._matricula, value) = false) Then
				Me.OnmatriculaChanging(value)
				Me.SendPropertyChanging
				Me._matricula = value
				Me.SendPropertyChanged("matricula")
				Me.OnmatriculaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_asiento", DbType:="NVarChar(20)")>  _
	Public Property asiento() As String
		Get
			Return Me._asiento
		End Get
		Set
			If (String.Equals(Me._asiento, value) = false) Then
				Me.OnasientoChanging(value)
				Me.SendPropertyChanging
				Me._asiento = value
				Me.SendPropertyChanged("asiento")
				Me.OnasientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tomo", DbType:="NVarChar(20)")>  _
	Public Property tomo() As String
		Get
			Return Me._tomo
		End Get
		Set
			If (String.Equals(Me._tomo, value) = false) Then
				Me.OntomoChanging(value)
				Me.SendPropertyChanging
				Me._tomo = value
				Me.SendPropertyChanged("tomo")
				Me.OntomoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_prestamoId", DbType:="Int NOT NULL")>  _
	Public Property prestamoId() As Integer
		Get
			Return Me._prestamoId
		End Get
		Set
			If ((Me._prestamoId = value)  _
						= false) Then
				If Me._prestamo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnprestamoIdChanging(value)
				Me.SendPropertyChanging
				Me._prestamoId = value
				Me.SendPropertyChanged("prestamoId")
				Me.OnprestamoIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Hipoteca_hipotecaEstado", Storage:="_hipotecaEstado", ThisKey:="hipotecaId", OtherKey:="hipotecaId")>  _
	Public Property hipotecaEstado() As EntitySet(Of hipotecaEstado)
		Get
			Return Me._hipotecaEstado
		End Get
		Set
			Me._hipotecaEstado.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="prestamo_Hipoteca", Storage:="_prestamo", ThisKey:="prestamoId", OtherKey:="prestamoId", IsForeignKey:=true)>  _
	Public Property prestamo() As prestamo
		Get
			Return Me._prestamo.Entity
		End Get
		Set
			Dim previousValue As prestamo = Me._prestamo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._prestamo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._prestamo.Entity = Nothing
					previousValue.Hipoteca.Remove(Me)
				End If
				Me._prestamo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Hipoteca.Add(Me)
					Me._prestamoId = value.prestamoId
				Else
					Me._prestamoId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("prestamo")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_hipotecaEstado(ByVal entity As hipotecaEstado)
		Me.SendPropertyChanging
		entity.Hipoteca = Me
	End Sub
	
	Private Sub detach_hipotecaEstado(ByVal entity As hipotecaEstado)
		Me.SendPropertyChanging
		entity.Hipoteca = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.prestamo")>  _
Partial Public Class prestamo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _prestamoId As Integer
	
	Private _codigoCliente As String
	
	Private _codigoAgencia As String
	
	Private _nombreCliente As String
	
	Private _rnpCliente As String
	
	Private _nombrePropietario As String
	
	Private _rnpPropietario As String
	
	Private _monto As Decimal
	
	Private _plazo As Integer
	
	Private _tasaInteres As Decimal
	
	Private _cuotaPagar As Decimal
	
	Private _interesMora As System.Nullable(Of Decimal)
	
	Private _valorRemate As Decimal
	
	Private _descripcion As String
	
	Private _Hipoteca As EntitySet(Of Hipoteca)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnprestamoIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnprestamoIdChanged()
    End Sub
    Partial Private Sub OncodigoClienteChanging(value As String)
    End Sub
    Partial Private Sub OncodigoClienteChanged()
    End Sub
    Partial Private Sub OncodigoAgenciaChanging(value As String)
    End Sub
    Partial Private Sub OncodigoAgenciaChanged()
    End Sub
    Partial Private Sub OnnombreClienteChanging(value As String)
    End Sub
    Partial Private Sub OnnombreClienteChanged()
    End Sub
    Partial Private Sub OnrnpClienteChanging(value As String)
    End Sub
    Partial Private Sub OnrnpClienteChanged()
    End Sub
    Partial Private Sub OnnombrePropietarioChanging(value As String)
    End Sub
    Partial Private Sub OnnombrePropietarioChanged()
    End Sub
    Partial Private Sub OnrnpPropietarioChanging(value As String)
    End Sub
    Partial Private Sub OnrnpPropietarioChanged()
    End Sub
    Partial Private Sub OnmontoChanging(value As Decimal)
    End Sub
    Partial Private Sub OnmontoChanged()
    End Sub
    Partial Private Sub OnplazoChanging(value As Integer)
    End Sub
    Partial Private Sub OnplazoChanged()
    End Sub
    Partial Private Sub OntasaInteresChanging(value As Decimal)
    End Sub
    Partial Private Sub OntasaInteresChanged()
    End Sub
    Partial Private Sub OncuotaPagarChanging(value As Decimal)
    End Sub
    Partial Private Sub OncuotaPagarChanged()
    End Sub
    Partial Private Sub OninteresMoraChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OninteresMoraChanged()
    End Sub
    Partial Private Sub OnvalorRemateChanging(value As Decimal)
    End Sub
    Partial Private Sub OnvalorRemateChanged()
    End Sub
    Partial Private Sub OndescripcionChanging(value As String)
    End Sub
    Partial Private Sub OndescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Hipoteca = New EntitySet(Of Hipoteca)(AddressOf Me.attach_Hipoteca, AddressOf Me.detach_Hipoteca)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_prestamoId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property prestamoId() As Integer
		Get
			Return Me._prestamoId
		End Get
		Set
			If ((Me._prestamoId = value)  _
						= false) Then
				Me.OnprestamoIdChanging(value)
				Me.SendPropertyChanging
				Me._prestamoId = value
				Me.SendPropertyChanged("prestamoId")
				Me.OnprestamoIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_codigoCliente", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property codigoCliente() As String
		Get
			Return Me._codigoCliente
		End Get
		Set
			If (String.Equals(Me._codigoCliente, value) = false) Then
				Me.OncodigoClienteChanging(value)
				Me.SendPropertyChanging
				Me._codigoCliente = value
				Me.SendPropertyChanged("codigoCliente")
				Me.OncodigoClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_codigoAgencia", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property codigoAgencia() As String
		Get
			Return Me._codigoAgencia
		End Get
		Set
			If (String.Equals(Me._codigoAgencia, value) = false) Then
				Me.OncodigoAgenciaChanging(value)
				Me.SendPropertyChanging
				Me._codigoAgencia = value
				Me.SendPropertyChanged("codigoAgencia")
				Me.OncodigoAgenciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nombreCliente", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property nombreCliente() As String
		Get
			Return Me._nombreCliente
		End Get
		Set
			If (String.Equals(Me._nombreCliente, value) = false) Then
				Me.OnnombreClienteChanging(value)
				Me.SendPropertyChanging
				Me._nombreCliente = value
				Me.SendPropertyChanged("nombreCliente")
				Me.OnnombreClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rnpCliente", DbType:="NVarChar(40) NOT NULL", CanBeNull:=false)>  _
	Public Property rnpCliente() As String
		Get
			Return Me._rnpCliente
		End Get
		Set
			If (String.Equals(Me._rnpCliente, value) = false) Then
				Me.OnrnpClienteChanging(value)
				Me.SendPropertyChanging
				Me._rnpCliente = value
				Me.SendPropertyChanged("rnpCliente")
				Me.OnrnpClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nombrePropietario", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property nombrePropietario() As String
		Get
			Return Me._nombrePropietario
		End Get
		Set
			If (String.Equals(Me._nombrePropietario, value) = false) Then
				Me.OnnombrePropietarioChanging(value)
				Me.SendPropertyChanging
				Me._nombrePropietario = value
				Me.SendPropertyChanged("nombrePropietario")
				Me.OnnombrePropietarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rnpPropietario", DbType:="NVarChar(40) NOT NULL", CanBeNull:=false)>  _
	Public Property rnpPropietario() As String
		Get
			Return Me._rnpPropietario
		End Get
		Set
			If (String.Equals(Me._rnpPropietario, value) = false) Then
				Me.OnrnpPropietarioChanging(value)
				Me.SendPropertyChanging
				Me._rnpPropietario = value
				Me.SendPropertyChanged("rnpPropietario")
				Me.OnrnpPropietarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_monto", DbType:="Decimal(18,2) NOT NULL")>  _
	Public Property monto() As Decimal
		Get
			Return Me._monto
		End Get
		Set
			If ((Me._monto = value)  _
						= false) Then
				Me.OnmontoChanging(value)
				Me.SendPropertyChanging
				Me._monto = value
				Me.SendPropertyChanged("monto")
				Me.OnmontoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_plazo", DbType:="Int NOT NULL")>  _
	Public Property plazo() As Integer
		Get
			Return Me._plazo
		End Get
		Set
			If ((Me._plazo = value)  _
						= false) Then
				Me.OnplazoChanging(value)
				Me.SendPropertyChanging
				Me._plazo = value
				Me.SendPropertyChanged("plazo")
				Me.OnplazoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tasaInteres", DbType:="Decimal(5,3) NOT NULL")>  _
	Public Property tasaInteres() As Decimal
		Get
			Return Me._tasaInteres
		End Get
		Set
			If ((Me._tasaInteres = value)  _
						= false) Then
				Me.OntasaInteresChanging(value)
				Me.SendPropertyChanging
				Me._tasaInteres = value
				Me.SendPropertyChanged("tasaInteres")
				Me.OntasaInteresChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cuotaPagar", DbType:="Decimal(18,2) NOT NULL")>  _
	Public Property cuotaPagar() As Decimal
		Get
			Return Me._cuotaPagar
		End Get
		Set
			If ((Me._cuotaPagar = value)  _
						= false) Then
				Me.OncuotaPagarChanging(value)
				Me.SendPropertyChanging
				Me._cuotaPagar = value
				Me.SendPropertyChanged("cuotaPagar")
				Me.OncuotaPagarChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_interesMora", DbType:="Decimal(18,2)")>  _
	Public Property interesMora() As System.Nullable(Of Decimal)
		Get
			Return Me._interesMora
		End Get
		Set
			If (Me._interesMora.Equals(value) = false) Then
				Me.OninteresMoraChanging(value)
				Me.SendPropertyChanging
				Me._interesMora = value
				Me.SendPropertyChanged("interesMora")
				Me.OninteresMoraChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_valorRemate", DbType:="Decimal(18,2) NOT NULL")>  _
	Public Property valorRemate() As Decimal
		Get
			Return Me._valorRemate
		End Get
		Set
			If ((Me._valorRemate = value)  _
						= false) Then
				Me.OnvalorRemateChanging(value)
				Me.SendPropertyChanging
				Me._valorRemate = value
				Me.SendPropertyChanged("valorRemate")
				Me.OnvalorRemateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me.OndescripcionChanging(value)
				Me.SendPropertyChanging
				Me._descripcion = value
				Me.SendPropertyChanged("descripcion")
				Me.OndescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="prestamo_Hipoteca", Storage:="_Hipoteca", ThisKey:="prestamoId", OtherKey:="prestamoId")>  _
	Public Property Hipoteca() As EntitySet(Of Hipoteca)
		Get
			Return Me._Hipoteca
		End Get
		Set
			Me._Hipoteca.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Hipoteca(ByVal entity As Hipoteca)
		Me.SendPropertyChanging
		entity.prestamo = Me
	End Sub
	
	Private Sub detach_Hipoteca(ByVal entity As Hipoteca)
		Me.SendPropertyChanging
		entity.prestamo = Nothing
	End Sub
End Class
